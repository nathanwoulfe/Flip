{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Flip/Backoffice/flip.ts","src/Flip/Backoffice/js/flip.controller.ts","src/Flip/Backoffice/js/flip.resource.ts"],"names":[],"mappings":"AAAA;;;ACAC,sDAAkD;AACnD,0DAA4D;AAE5D,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,CAAC;KACrD,OAAO,CAAC,4BAAY,CAAC,WAAW,EAAE,4BAAY,CAAC,CAAC,IAAI,CAAC;AAE1D,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE,CAAC;KAC3D,UAAU,CAAC,sCAAoB,CAAC,cAAc,EAAE,sCAAoB,CAAC,CAAC,IAAI,CAAC;AAEhF,MAAM,IAAI,GAAG,MAAM,CAAC;AAEpB,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;IACjB,cAAc;IACd,iBAAiB;CACpB,CAAC,CAAC;AAEH,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;AChB7C,MAAa,oBAAoB;IAe9B,YACY,YAA2B,EAC5B,MAAM,EACL,iBAAiB,EACjB,OAAO;QAHP,iBAAY,GAAZ,YAAY,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAA;QACL,sBAAiB,GAAjB,iBAAiB,CAAA;QACjB,YAAO,GAAP,OAAO,CAAA;QAfnB,WAAM,GAAY,KAAK,CAAC;QACxB,mBAAc,GAAe,EAAE,CAAC;QAGhC,YAAO,GAA0B,UAAU,CAAC;QAG5C,kBAAa,GAAG,EAAE,CAAC;QASf,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACxD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAO;QACH,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;aACxD,IAAI,CAAC,IAAI,CAAC,EAAE;YACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAA;IACV,CAAC;IAED,UAAU;QACN,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED;;SAEK;IACL,iBAAiB;QACb,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;aAC1D,IAAI,CAAC,MAAM,CAAC,EAAE;YACX,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;YAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YAEnB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;aAC3C;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAED;;SAEK;IACL,4BAA4B,CAAC,cAAuB,KAAK;QACrD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAExB,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;SACvD;QAED,+DAA+D;QAC/D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,gDAAgD;QAChD,MAAM,aAAa,GAAG;YAClB,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE;YACzG,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;SAAC,CAAC;QAErE,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACzB,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;YAE9F,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;gBAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;aAC7F;YAED,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;gBACjC,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,MAAM,EAAE,IAAI,CAAC,mBAAmB;gBAChC,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,IAAI;aACnB,CAAC,CAAC;YAEH,mFAAmF;YACnF,6FAA6F;YAC7F,gFAAgF;YAEhF,oEAAoE;YACpE,IAAI,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK;gBACxE,CAAC,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAEhH,gBAAgB,GAAG,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAEhL,IAAI,gBAAgB,EAAE;gBAClB,gBAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;aAC1C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;SAEK;IACL,KAAK;QACD,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC;IACxC,CAAC;IAED;;SAEK;IACL,IAAI;QACA,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;aACvJ,IAAI,CAAC,MAAM,CAAC,EAAE;YACX,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACX,CAAC;;AAtHJ,oDAuHA;AArHiB,mCAAc,GAAG,wBAAwB,CAAC;;;;;ACA5D,MAAa,YAAY;IAMrB,YAAoB,KAAmB,EAAU,gBAAgB;QAA7C,UAAK,GAAL,KAAK,CAAc;QAAU,qBAAgB,GAAhB,gBAAgB,CAAA;QAFzD,gBAAW,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC;QAI1D,aAAQ,GAAG,CAAC,MAAsB,EAAE,GAAW,EAAE,eAAuB,iBAAiB,EAAE,IAAa,EAAE,EAAE,CAChH,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAC7B,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,EAC9G,YAAY,CAAC,CAAC;QAEtB,sBAAiB,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,4BAA4B,MAAM,EAAE,EAAE,gDAAgD,GAAG,MAAM,CAAC,CAAC;QAEpJ,sBAAiB,GAAG,CAAC,MAAc,EAAE,aAAqB,EAAE,UAAkB,EAAE,UAAwC,EAAE,EAAE,CACxH,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,mBAAmB,EAAE,6CAA6C,GAAG,MAAM,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;QAE1J,oBAAe,GAAG,CAAC,MAAc,EAAE,EAAE,CACjC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,0BAA0B,MAAM,EAAE,EAAE,yCAAyC,GAAG,MAAM,CAAC,CAAC;IAb5C,CAAC;;AAN1E,oCAoBC;AAlBiB,wBAAW,GAAG,cAAc,CAAC","file":"flip.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","﻿import { FlipResource } from './js/flip.resource';\r\nimport { FlipDialogController } from './js/flip.controller';\r\n\r\nconst ServicesModule = angular.module('flip.services', [])\r\n    .service(FlipResource.serviceName, FlipResource).name;\r\n\r\nconst ControllersModule = angular.module('flip.controllers', [])\r\n    .controller(FlipDialogController.controllerName, FlipDialogController).name;\r\n\r\nconst flip = 'flip';\r\n\r\nangular.module(flip, [\r\n    ServicesModule,\r\n    ControllersModule,\r\n]);\r\n\r\nangular.module('umbraco').requires.push(flip);","﻿export class FlipDialogController {\r\n\r\n    public static controllerName = 'Flip.Dialog.Controller';\r\n\r\n    loaded: boolean = false;\r\n    permittedTypes: Array<any> = [];\r\n    node: any;\r\n    newType: any;\r\n    mapType: 'EDITOR' | 'DATATYPE' = 'DATATYPE';\r\n    newTemplateId!: number;\r\n\r\n    newProperties = {};\r\n\r\n    mapTypeChange: Function;\r\n\r\n    constructor(\r\n        private flipResource: IFlipResource,\r\n        public $scope,\r\n        private navigationService,\r\n        private $window) {\r\n        this.mapTypeChange = $scope.$watch(() => this.mapType, () => {\r\n            this.newType ? this.getNewTypePropertyCollection() : {};\r\n        });\r\n    }\r\n\r\n    $onInit() {\r\n        this.flipResource.getContentModel(this.$scope.currentNode.id)\r\n            .then(node => {\r\n                this.node = node;\r\n                this.getPermittedTypes();\r\n            })\r\n    }\r\n\r\n    $onDestroy() {\r\n        this.mapTypeChange();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * */\r\n    getPermittedTypes() {\r\n        this.flipResource.getPermittedTypes(this.$scope.currentNode.id)\r\n            .then(result => {\r\n                this.permittedTypes = result.permittedTypes;\r\n                this.loaded = true;\r\n\r\n                if (this.permittedTypes.length === 1) {\r\n                    this.newType = this.permittedTypes[0];\r\n                    this.getNewTypePropertyCollection(true);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * */\r\n    getNewTypePropertyCollection(setsNewType: boolean = false) {\r\n        this.newProperties = {};\r\n\r\n        if (setsNewType) {\r\n            this.newTemplateId = this.newType.DefaultTemplateId;\r\n        }\r\n\r\n        // clear to ensure no stale data after changing type or mapType\r\n        this.node.properties.forEach(prop => {\r\n            prop.newAlias = '';\r\n        });\r\n\r\n        // iterates over explict and composed properties\r\n        const propertyTypes = [\r\n            ...this.newType.ContentTypeComposition.map(x => x.PropertyGroups.map(y => y.PropertyTypes).flat()).flat(),\r\n            ...this.newType.PropertyGroups.map(x => x.PropertyTypes).flat()];\r\n\r\n        propertyTypes.forEach(type => {\r\n            const propertyKey = this.mapType === 'DATATYPE' ? type.DataTypeKey : type.PropertyEditorAlias;\r\n\r\n            if (!this.newProperties[propertyKey]) {\r\n                this.newProperties[propertyKey] = [{ dataTypeKey: '', editor: '', alias: '', label: '' }];\r\n            }\r\n\r\n            this.newProperties[propertyKey].push({\r\n                dataTypeKey: type.DataTypeKey,\r\n                editor: type.PropertyEditorAlias,\r\n                alias: type.Alias,\r\n                label: type.Name,\r\n            });\r\n\r\n            // also check that the current type has a matching property - match on datatype key\r\n            // to only allow matches on the exact data type, not the property editor as config may differ\r\n            // if so, set newAlias on the current type to ensure the value is mapped on save\r\n\r\n            // look for exact match by alias first, then check for broader match\r\n            let existingProperty = this.node.properties.find(p => p.alias === type.Alias &&\r\n                (this.mapType === 'DATATYPE' ? p.dataTypeKey === type.DataTypeKey : p.editor === type.PropertyEditorAlias));\r\n\r\n            existingProperty = existingProperty ?? this.node.properties.find(p => this.mapType === 'DATATYPE' ? p.dataTypeKey === type.DataTypeKey : p.editor === type.PropertyEditorAlias);\r\n\r\n            if (existingProperty) {\r\n                existingProperty.newAlias = type.Alias;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * */\r\n    close() {\r\n        this.navigationService.hideDialog();\r\n    }\r\n\r\n    /**\r\n     * \r\n     * */\r\n    save() {\r\n        this.flipResource.changeContentType(this.$scope.currentNode.id, this.newType.Id, this.newTemplateId || this.newType.DefaultTemplateId, this.node.properties)\r\n            .then(result => {\r\n                this.$window.location.reload();\r\n            });\r\n    }\r\n}","﻿import { IHttpService } from \"angular\";\r\n\r\nexport class FlipResource implements IFlipResource {\r\n\r\n    public static serviceName = 'flipResource';\r\n\r\n    private _apiBaseUrl = Umbraco.Sys.ServerVariables.Flip.apiBaseUrl;\r\n\r\n    constructor(private $http: IHttpService, private umbRequestHelper) { }\r\n\r\n    private _request = (method: 'POST' | 'GET', url: string, errorMessage: string = 'Something broke', data?: object) =>\r\n        this.umbRequestHelper.resourcePromise(\r\n                method === 'POST' ? this.$http.post(this._apiBaseUrl + url, data) : this.$http.get(this._apiBaseUrl + url),\r\n            errorMessage);\r\n\r\n    getPermittedTypes = nodeId => this._request('GET', `GetPermittedTypes?nodeId=${nodeId}`, 'Failed to retrieve permitted types for node id' + nodeId);\r\n\r\n    changeContentType = (nodeId: number, contentTypeId: number, templateId: number, properties: Array<IDocumentTypeProperty>) =>\r\n        this._request('POST', 'ChangeContentType', 'Failed to change document type for node id ' + nodeId, { nodeId, contentTypeId, templateId, properties });\r\n   \r\n    getContentModel = (nodeId: number) =>\r\n        this._request('GET', `GetContentModel?nodeId=${nodeId}`, 'Failed to get content type for node id ' + nodeId);\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}