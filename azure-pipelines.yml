trigger:
  batch: true
  branches:
    include:
    - main
  tags:
    include:
    - refs/tags/release-*

parameters:
  - name: cache_npm
    displayName: Cache NPM packages
    type: boolean
    default: true
  - name: cache_nuget
    displayName: Cache NuGet packages
    type: boolean
    default: false

variables:
  SOLUTION: Flip.sln
  CONFIGURATION: Release
  NODE_VERSION: 16.x
  DOTNET_VERSION: 6.x
  DOTNET_PREVIEW: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

stages: 
  - stage: Build
    variables:
      NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
      npm_config_cache: $(Pipeline.Workspace)/.npm_client
    jobs:
      - job: Build
        pool: 
          vmImage: windows-latest
        steps:
          - task: NodeTool@0
            displayName: Use Node.js $(NODE_VERSION)
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: NuGetAuthenticate@1
            displayName: Authenticate NuGet

          - task: UseDotNet@2
            displayName: Use .Net $(DOTNET_VERSION)
            inputs:
              version: $(DOTNET_VERSION)
              includePreviewVersions: $(DOTNET_PREVIEW)

          - task: PowerShell@2
            displayName: Get version from csproj
            inputs:
              targetType: inline      
              script: |
                $buildTag = If ($Env:BUILD_SOURCEBRANCH.StartsWith('refs/tags/release-')) { 'RELEASE' } Else { 'CONTINUOUS' }
                Write-Host "##vso[build.addbuildtag]$buildTag"

                $xml = [Xml] (Get-Content .\Directory.Build.props)
                $prefix = $xml.Project.PropertyGroup.VersionPrefix
                $suffix = If ($xml.Project.PropertyGroup.VersionSuffix) { '-' + $xml.Project.PropertyGroup.VersionSuffix } Else { '' }

                $date = $(Get-Date -Format dd-MM-yyyy)
   
                Write-Host "prefix = $prefix | suffix = $suffix | build = $Env:BUILD_BUILDID | date = $date | buildTag = $buildTag"
      
                If ($buildTag -eq 'RELEASE') {
                  Write-Host "##vso[task.setvariable variable=VERSION]$prefix$suffix" } 
                Else {
                  Write-Host "##vso[task.setvariable variable=VERSION]$prefix$suffix.$date.$Env:BUILD_BUILDID" }                 

          - task: Cache@2
            displayName: Cache NPM packages
            condition: ${{ parameters.cache_npm }}
            inputs:
              key: 'npm | "$(Agent.OS)" | **/package-lock.json, !**/node_modules/**'
              restoreKeys: |
                npm | "$(Agent.OS)"
                npm
              path: $(npm_config_cache)

          - task: Cache@2
            condition: ${{ parameters.cache_nuget }}
            displayName: Cache NuGet packages
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: $(NUGET_PACKAGES)
              cacheHitVar: 'CACHE_NUGET_RESTORED'

          - task: Npm@1
            displayName: NPM install
            inputs:
              command: install
              workingDir: './src/Flip/Backoffice'     
              
          - script: dotnet restore $(SOLUTION)
            condition: or(not(${{ parameters.cache_nuget }}), ne(variables.CACHE_NUGET_RESTORED, true))
            displayName: Restore NuGet packages

          - task: Npm@1
            displayName: Build Backoffice
            inputs:
              command: custom
              workingDir: './src/Flip/Backoffice'
              customCommand: 'run prod'

          - script: dotnet build $(SOLUTION) --configuration $(CONFIGURATION) --no-restore -p:ContinuousIntegrationBuild=true
            displayName: Run dotnet build

          - script: dotnet pack $(SOLUTION) --configuration $(CONFIGURATION) --no-restore --output $(Build.ArtifactStagingDirectory)/nupkg
            displayName: Run dotnet pack

          - task: PublishPipelineArtifact@1
            displayName: Publish Nuget packages
            inputs:
              artifactName: nupkg
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg

          - task: PublishPipelineArtifact@1
            displayName: Publish build output
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output
                              